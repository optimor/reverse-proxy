server-dev:
  build: .
  dockerfile: dockerfiles/Dockerfile
  hostname: docker-container
  user: root
  volumes:
    - ./reverse_proxy:/src
  ports:
    - "8000:8000"
  environment:
    ADMIN_USERNAME: admin
    ADMIN_PASSWORD: admin
    ADMIN_EMAIL: admin@exmaple.com

server-nginx:
  build: .
  dockerfile: dockerfiles/Dockerfile
  hostname: docker-container
  user: root
  ports:
    - "8000:80"
  environment:
    ENVIRONMENT: production
    SECRET_KEY: '2tcw0lbppjms#1+wm5!bof)w*ba(9h+20%xtu0&8jh+r!2@xq('
    SESSION_COOKIE_DOMAIN: 'None'
    SESSION_COOKIE_NAME: None
    SESSION_COOKIE_SECURE: null
    ADMIN_USERNAME: 'superuser'
    ADMIN_PASSWORD: 'superuser'
    ADMIN_EMAIL: 'superuser@example.com'
    EMAIL_HOST: 'mail.net'
    EMAIL_HOST_USER: 'mail_user'
    EMAIL_HOST_PASSWORD: 'mail_password'
    EMAIL_PORT: 587
    EMAIL_USE_TLS: 'true'

lint:
  build: .
  dockerfile: dockerfiles/Dockerfile_test
  hostname: lint
  volumes:
    - .:/opt/optimor/src
  user: root
  command: >
    bash -c "echo 'RUNNING BLACK' &&
              black --check . --exclude=venv &&
              echo 'RUNNING PYCODESTYLE' &&
              pycodestyle . --config pycodestyle.cfg"

lint-fix:
  build: .
  dockerfile: dockerfiles/Dockerfile_test
  hostname: lint-fix
  volumes:
    - .:/opt/optimor/src
  user: root
  command: >
    bash -c "echo 'RUNNING BLACK' &&
              black . --exclude=venv"

# =============================================================================
# ---------------------------- PIP-COMPILE SERVICES ---------------------------
# Pip-tools are used to manage packages in reverse_proxy project. Services
# defined below are used to simplify the automatic package management.
# =============================================================================

# -----------------------------------------------------------------------------
# 'pip-compile' service is used to add new packages listed in requirements.in
#
# Usage:
#   docker-compose run --rm pip-compile
# -----------------------------------------------------------------------------
pip-compile:
  build: .
  dockerfile: dockerfiles/Dockerfile
  volumes:
    - .:/src
  entrypoint: []
  user: django
  command: >
    bash --login -c "pip-compile --output-file requirements.txt requirements.in &&
                     pip-compile --output-file requirements_test.txt requirements_test.in"
# -----------------------------------------------------------------------------
# 'pip-compile-upgrade-requirements' service is used to upgrade packages
# located in requirements '.in' files. Note that when upgrading package all
# files must be recompiled to keep the packages versions in sync.
#
# Usage:
#   UPGRADE_PACKAGE=<package_name> docker-compose run --rm pip-compile-upgrade-requirements
# -----------------------------------------------------------------------------
pip-compile-upgrade-requirements:
  extends:
    service: pip-compile
  command: >
    bash --login -c " pip-compile --upgrade-package $UPGRADE_PACKAGE --output-file requirements.txt requirements.in &&
                      pip-compile --upgrade-package $UPGRADE_PACKAGE --output-file requirements_test.txt requirements_test.in"
